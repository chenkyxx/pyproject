# coding:utf-8
import threading
from Airport.id.new_xingm import *
from Airport.new_method import *
from Airport.id.Idcardnumber import *
from Airport.msgQueue.Autosendlk import *
from Airport.test_预安检人票验证 import *
from Airport.test_预安检口人脸验证 import api_v1_face_pre_security_check
from Airport.test_安检口 import api_v1_face_security_check
from Airport.test_复核口验证 import api_v1_face_review_check
"""参数池"""
inf = ("INF", " ")
# lk_inf = inf[random.randint(0, 1)]   # 带婴儿标志


# 设置预安检通道编号
atYA_list = ["atYA-A", "atYA-B", "atYA-C", "atYA-D", "atYA-E"]
# 设置安检口通道编号
atAJ_list = ["atAJ-A", "atAJ-B", "atAJ-C", "atAJ-D", "atAJ-E"]
# 设置复核口通道编号
atAF_list = ["atAF-A", "atAF-B", "atAF-C", "atAF-D", "atAF-E"]
# 设置设备编号
list_device = ["SB001","SB002","SB003","SB004","SB005","SB006","SB007","SB008","SB009","SB010",
                   "SB012","SB013","SB014","SB015","SB016","SB017","SB018","SB019","SB020"]
device_Id = list_device[random.randint(0, 18)]


def fun1():
    lk_sex = str(random.randint(0, 1))
    lk_cardid = get_random_id_number()
    lk_cname = get_name()
    lk_date = produce_flight_date()
    num = str(random.randint(1, 100000))
    lk_flight = "ZU"+num
    lk_id = get_uuid()
    lk_bdno = get_lk_bdno()

    # 开始发送旅客信息（航班值机信息） 模拟安检系统

    send_lkxx(lk_bdno=lk_bdno,  # 生成随机的101-999的序列号
              lk_cardid=lk_cardid,  # 生成随机的正确的身份证号码
              lk_chkt=get_flight_out_time(),  # 在当前时间上加上对应的延迟时间作为起飞时间
              lk_cname=lk_cname,  # 生成人员姓名
              lk_date=lk_date,  # 以当前时间生成航班日期
              lk_desk=get_lk_desk(),  # 随机生成正确的航班目的地
              lk_flight=lk_flight,  # 累加生成航班号码
              lk_id=lk_id,  # 累加生成旅客id
              lk_inf=inf[random.randint(0, 1)],  # 是否带婴儿
              lk_insur=str(random.randint(0, 1)),  # 设置是否购买保险 设置是否购买保险 随机数
              lk_sex=lk_sex,  # 随机性别
              lk_vip=str(random.randint(0, 2))  # 随机贵宾是否是贵宾 0不是  1是  2未知
              )
    # 验票需要的参数  比对lk_flight 和 li_date

    time.sleep(2)
    body_data = {"reqId": get_uuid(),
                 "flightNo": lk_flight,
                 "flightDay": str(lk_date[6:8]),
                 "QTCode": "abcde",
                 "seatId": "1",
                 "startPort": "HET",
                 "boardingNumber": lk_bdno}
    # 发送请求进行验票
    ticket_check(body_data)

    time.sleep(0.5)
    features_1_1 = ""

    features_1_N = "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"

    m1 = to_base64(r"D:\work file\project\zhihuipanshi\chenkeyunli_gaitubao_com_150x150.jpg")
    m2 = to_base64(r"D:\work file\project\zhihuipanshi\chenkeyunli_gaitubao_com_150x150.jpg")

    time.sleep(1)
    # 发送预安检人脸验证
    body_data_a = {"reqId": get_uuid(),
                   "gateNo": atYA_list[random.randint(0, 4)],
                   "deviceId": list_device[random.randint(0, 18)],
                   "cardType": 0,  # 证件类型 int
                   "idCard": lk_cardid,
                   "nameZh": lk_cname,
                   "nameEn": "englishName",
                   "age": get_age(lk_cardid),  # int  通过身份证证件号码获取旅客年龄
                   "sex": lk_sex,  # int  获取一致的性别信息
                   "birthDate": get_birthday(lk_cardid),  # 通过前面生成的身份号码获取生日信息
                   "address": "重庆市渝北区大竹林",
                   "certificateValidity": "%s-20201212" % get_birthday(lk_cardid),  # 时间yyyymmdd或者长期(起-止)
                   "nationality": "中国",
                   "ethnic": "汉族",
                   "contactWay": "13512134390",
                   "scenePhoto": m2,
                   "sceneFeature": features_1_1,
                   "cardPhoto": m1,
                   "cardFeature": features_1_1,
                   "flightNo": lk_flight,
                   "flightDay": str(lk_date[6:8]),
                   "QTCode": "abcde",
                   "seatId": "1",
                   "startPort": "HET",
                   "boardingNumber": lk_bdno,
                   "fId": get_uuid()}

    # 发送请求
    api_v1_face_pre_security_check(body_data_a)
    time.sleep(0.5)

    # 进行安检口1:1
    body_data_b = {"reqId": get_uuid(),
                   "gateNo": atAJ_list[random.randint(0, 4)],
                   "deviceId": list_device[random.randint(0, 18)],
                   "cardType": 0,  # 证件类型 int
                   "idCard": lk_cardid,
                   "nameZh": lk_cname,
                   "nameEn": "englishName",
                   "age": get_age(lk_cardid),  # int
                   "sex": lk_sex,  # int
                   "birthDate": get_birthday(lk_cardid),
                   "address": "重庆西南",
                   "certificateValidity": "%s-20201212" % get_birthday(lk_cardid),  # 时间yyyymmdd或者长期(起-止)
                   "nationality": "中国",
                   "ethnic": "汉族",
                   "contactWay": "13512134390",
                   "scenePhoto": m2,
                   "sceneFeature": features_1_1,
                   "cardPhoto": m1,
                   "cardFeature": features_1_1}
    # 发送请求
    api_v1_face_security_check(body_data_b)
    time.sleep(1.5)

    # 进行安检复核
    body_data_c = {"reqId": get_uuid(),
                   "gateNo": atAF_list[random.randint(0, 4)],
                   "deviceId": list_device[random.randint(0, 18)],
                   "scenePhoto": m1,
                   "sceneFeature": features_1_N}

    # 发送请求
    api_v1_face_review_check(body_data_c)

    # 发送安检状态
    safe_number_list = ["10", "20", "30", "40", "50", "60"]
    safe_number = safe_number_list[random.randint(0, 5)]  # 安检通道号

    safe_operation_list = ["PA0101", "PA0102", "PA0103", "PA0104", "PA0105", "PA0106", "PA0107", "PA0108",
                           "PA0109", "PA0110"]
    safe_opera = safe_operation_list[random.randint(0, 9)]  # 安检验证员

    send_ajxx(ajxxb_id=get_uuid(),
              lk_id=lk_id,
              safe_flag="1",  # 安检状态 1已安检 0是未安检
              safe_no=safe_number,  # 安检通道号
              safe_oper=safe_opera,  # 安检验证员
              safe_time=get_time_mmss())


threads = []
t1 = threading.Thread(fun1(), args=())
threads.append(t1)
t2 = threading.Thread(fun1(), args=())
threads.append(t2)

if __name__ == '__main__':
    while True:
        for i in threads:
            i.start()
        i.join()